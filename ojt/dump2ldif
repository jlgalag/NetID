#!/usr/bin/perl

require "subroutines.pl";

use Net::LDAP;
use Digest::SHA;
use MIME::Base64;

##############
# MAIN START #
##############

if (!defined $ARGV[0]){die "No input file!\n"; }
if (!open INPUT_DUMP, "<", $ARGV[0]) { die "Cannot open file: $ARGV[0]\n"; }
if (!defined $ARGV[1]){die "No output file!\n"; }
if (!open OUTPUT_LDIF, ">", $ARGV[1]) { die "Cannot write to file: $ARGV[1]\n"; }
if (!open PASS_PLAIN_DUMP, ">", "password_plain") { die "Cannot open file: password_plain\n"; }

$thisfile = 1;

###################
# Bind to ronTest #
###################
#only assumed a high number to fid the dump
$temp = 25000;
@passwords_generated = split(/\n/, `pwgen -c -n -1 8 $temp`);

#Obtain uidIdentifierUPLB
$ldap_server_ip_and_port = "10.0.100.201:389";
$ldap = Net::LDAP->new( $ldap_server_ip_and_port ) or die "Could not connect to ronTest!\n";
print "Enter bind DN Password for RonTest: ";
# Code non-portable (UNIX/Linux only)
        system('stty','-echo');
        chop($password=<STDIN>);
        system('stty','echo');
# End non-portable
print "\n";
$mesg = $ldap->bind( "cn=admin,dc=uplb,dc=edu,dc=ph", password => $password );
if ($mesg->code){ die "Fatal Error: RonTest Authentication Fail\n"; }

$mesg = $ldap->bind( "cn=admin,dc=uplb,dc=edu,dc=ph", password => $password );
if ($mesg->code){ die "Fatal Error: Authentication Fail\n"; }

#Retrieve gidGroups
 $mesg = $ldap->search(
                base   => "ou=posixGroups,dc=uplb,dc=edu,dc=ph",
                filter => "(cn=*)",
                attrs  => "gidNumber"
              );
foreach $entry ($mesg->entries){
        $cn_a = $entry->get_value("cn");
        $gidNumber_a = $entry->get_value("gidNumber");
	$cn_a{$gidNumber_a} = $cn_a;
	#print "cn: $cn_a\n"; #DEBUG
	#print "gidNumber: $gidNumber_a\n"; #DEBUG
}

#edit dump, remove all lines that are unnecessary
$editDump = `sed -e '/^shadow\\|^object\\|^modif\\|^login\\|^uidNumber\\|^dn\\|^homeDirectory\\|^structuralObject\\|^entryUUID\\|^creat\\|^entry\\|^userPass\\|^\\s.*\\|^jpeg\\|^seeAlso/d' $ARGV[0] > trimDump.ldif`;

close INPUT_DUMP;

if (!open INPUT_DUMP, "<", "trimDump.ldif") { die "Cannot open file\n"; }

#Retrieve uidLatestNumber
$mesg = $ldap->search(
                        base   => "ou=numberHolder,dc=uplb,dc=edu,dc=ph",
                        filter => "(cn=uidLatestNumber)",
			attrs  => "serialNumber"
                      );
if ($mesg->code){ die "Fatal Error: Could not find latest uidIdentifierUPLB\n"; }
@entry  = $mesg->entries;
$lastUID = $entry[0]->get_value('serialNumber');
print "\nLast UID: ", $lastUID, "\n";

@tokens;
$tokens[9] =0;
$counter = 0;
flag == 1 if employee, == 2 if student, 3 if alumni
foreach $line (<INPUT_DUMP>)  
{
	#find out if entry is employee
	if($line =~ m/^title: employee/g)
	{
		$flag = 1;
		$counter++;
	}
	#find out if entry is student
	elsif($line =~ m/^title: student/g)
	{
		$flag = 2;
		$counter++;
	}
	#find out if the entry is an alumni
	elsif($line =~ m/^title: alumni/g)
	{
		$flag = 3;
		$counter++;
	}
	#find out entry's college using gidNumber
	elsif($line =~ m/gidNumber: (.*)/g)
	{
		$tokens[9] = $1;
		$college = ($cn_a{$tokens[9]});
		$counter++;
	}
	#store value of employeeNumber or studentNumber
	elsif($line =~ m/^employeeNumber: (.*)/g)
	{
		$eNumber = $1;
		if(length $eNumber < 9){$eNumber = '0'.$eNumber;}
		$tokens[0] = $eNumber;
		$counter++;
	}
	elsif($line =~ m/^studentNumber: (.*)/g)
	{
		$eNumber = $1;
		$tokens[0] = $eNumber;
		$counter++;
	}
	#store value of employeeType or studentType
	elsif($line =~ m/^employeeType: (.*)/g)
	{
		$tokens[7] = $1;
		$counter++;
	}
	elsif($line =~ m/^studentType: (.*)/g)
	{
		$tokens[7] = $1;
		$counter++;
	}
	#store value of entry's mail
	elsif($line =~ m/^mail: (.*)/g)
	{
		$mail = $1;
		$counter++;
	}
	#store value of entry's cn
	elsif($line =~ m/^cn: (.*)/g)
	{
		$identifier = $1;
		$counter++;
	}
	#store value of entry's last name
	elsif($line =~ m/^sn: (.*)/g)
	{
		$tokens[1] = $1;
		$counter++;
	}
	#store value of entry's given name
	elsif($line =~ m/^givenName: (.*)/g)
	{
		$tokens[2] = $1;
		$tokens[3] = chop($fName);
		$counter++;
	}
	#store Office/College/Course
	elsif($line =~ m/^ou: (.*)/g) {
		$tokens[8] = $1;
		$counter++;
	}
	#store mail if present
	elsif ($line =~ m/^mail: (.*)/g) {
		$tokens[6] = $1;
	}
	#store suffix if present
	elsif ($line =~ m/^suffix: (.*)/g) {
		$tokens[5] = $1;
	} 
	#store mobile if present
	elsif ($line =~ m/^mobile: (.*)/g) {
		$tokens[5] = $1;
	} 
	#seperate ldif entry. print values to new file
	elsif($line eq "\n")
	{
		if($counter >= 8) {
			$counter = 0;
			#print "this is a new line\n";
			$branch = &findDuplicate;
			if($branch eq 1) {
				#record already present. proceed to next entry
				next;
			}elsif($branch eq 2) {
				&fixTokensCase;
				&fixTokensCaseStud;
				$UIDUPLB = &getUIDUPLB;
				&addEmployeeAttributes;
				#add employee attributes
				$intoLDAP = `ldapmodify -h 10.0.100.201 -p 389 -D "cn=admin,dc=uplb,dc=edu,dc=ph" -w testtesttest -f foo.ldif`;
				close OUTPUT_LDIF;
				if (!open OUTPUT_LDIF, ">", $ARGV[1]) { die "Cannot write to file: $ARGV[1]\n"; }
			}elsif($branch eq 3) {
				&fixTokensCase;
				$UIDUPLB = &getUIDUPLB;
				#add student attributes
				&addStudentAttributes;
				$intoLDAP = `ldapmodify -h 10.0.100.201 -p 389 -D "cn=admin,dc=uplb,dc=edu,dc=ph" -w testtesttest -f foo.ldif`;
				close OUTPUT_LDIF;
				if (!open OUTPUT_LDIF, ">", $ARGV[1]) { die "Cannot write to file: $ARGV[1]\n"; }
			}elsif($branch eq 4) {
				$lastUID++;
				&addNewEntry;
				$entryCounter++;
				$intoLDAP = `ldapmodify -h 10.0.100.201 -p 389 -D "cn=admin,dc=uplb,dc=edu,dc=ph" -w testtesttest -f foo.ldif`;
				close OUTPUT_LDIF;
				if (!open OUTPUT_LDIF, ">", $ARGV[1]) { die "Cannot write to file: $ARGV[1]\n"; }
			}
		}else{
			$counter = 0;
			next;
		}
	}else{
		next;
	}
}
close OUTPUT_LDIF;
if (!open OUTPUT_LDIF, ">", $ARGV[1]) { die "Cannot write to file: $ARGV[1]\n"; }

say OUTPUT_LDIF "dn: cn=uidLatestNumber,ou=numberHolder,dc=uplb,dc=edu,dc=ph";
say OUTPUT_LDIF "changetype: modify";
say OUTPUT_LDIF "replace: serialNumber";
say OUTPUT_LDIF "serialNumber: $lastUID";

$intoLDAP = `ldapmodify -h 10.0.100.201 -p 389 -D "cn=admin,dc=uplb,dc=edu,dc=ph" -w testtesttest -f foo.ldif`;
close OUTPUT_LDIF;
if (!open OUTPUT_LDIF, ">", $ARGV[1]) { die "Cannot write to file: $ARGV[1]\n"; }

#Close all handlers and streams
$ldap->unbind;
close INPUT_DUMP;
close OUTPUT_LDIF;
close PASS_PLAIN_DUMP;
